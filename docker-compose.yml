services:
  postgres:
    image: postgres:15
    container_name: postgres_db
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - default

  # pgadmin:
  #   image: dpage/pgadmin4
  #   restart: always
  #   container_name: pgadmin
  #   environment:
  #     - PGADMIN_DEFAULT_EMAIL=admin@admin.com
  #     - PGADMIN_DEFAULT_PASSWORD=admin
  #   ports:
  #     - '5050:80'
  #   networks:
  #     - default
  #   depends_on:
  #     - postgres

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: ${NODE_ENV:-dev} # Use "dev" or "prod" based on the mode
    container_name: backend
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
    depends_on:
      - postgres
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    volumes:
      - ./backend:/backend
      - /backend/node_modules
    networks:
      - default

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: ${NODE_ENV:-dev} # Use "dev" or "prod" based on the mode
    container_name: frontend
    env_file:
      - .env
    environment:
      API_URL: http://backend:${BACKEND_PORT}
    depends_on:
      - backend
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    volumes:
      - ./frontend:/frontend
      - /frontend/node_modules
    networks:
      - default

  nginx:
    image: nginx:latest
    container_name: nginx
    depends_on:
      - backend
      - frontend
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - default

volumes:
  postgres_data:
    driver: local

networks:
  default:
    driver: bridge